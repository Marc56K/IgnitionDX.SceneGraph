/* MIT License (MIT)
 *
 * Copyright (c) 2020 Marc Roßbach
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Texture2D ColorMap : register( t0 );
SamplerState ColorMapSamplerState : register( s0 );

cbuffer MaterialParameters
{
	float4 MaterialAmbientColor;
	float4 MaterialDiffuseColor;
	float4 MaterialSpecularColor;
	float MaterialShininess;
	bool MaterialUseColorMap;
}

cbuffer AmbientLightParameters
{
    float4 AmbientLightColor;
}

struct PS_INPUT
{
    float4 Position : SV_POSITION;
    float3 TexCoord : TEXCOORD;
};

float4 main( PS_INPUT input ) : SV_TARGET
{
	float4 color = MaterialAmbientColor * AmbientLightColor;

	if (MaterialUseColorMap)
	{
		color *= ColorMap.Sample(ColorMapSamplerState, input.TexCoord);
		if(color.a < 0.2)
		{
			discard;
		}
	}

	return color;
}